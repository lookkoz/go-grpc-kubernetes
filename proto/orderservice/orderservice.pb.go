// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orderservice/orderservice.proto

package order_api_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_Started    Status = 0
	Status_InProgress Status = 1
	Status_Completed  Status = 2
	Status_Refunded   Status = 3
)

var Status_name = map[int32]string{
	0: "Started",
	1: "InProgress",
	2: "Completed",
	3: "Refunded",
}

var Status_value = map[string]int32{
	"Started":    0,
	"InProgress": 1,
	"Completed":  2,
	"Refunded":   3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f3dcd817f520e5b1, []int{0}
}

type Order struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ProductUuid          string   `protobuf:"bytes,2,opt,name=product_uuid,json=productUuid,proto3" json:"product_uuid,omitempty"`
	Quantity             int32    `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Amount               float32  `protobuf:"fixed32,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency             string   `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	Status               Status   `protobuf:"varint,6,opt,name=status,proto3,enum=order.api.v1.Status" json:"status,omitempty"`
	Timestamp            int64    `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3dcd817f520e5b1, []int{0}
}

func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Order) GetProductUuid() string {
	if m != nil {
		return m.ProductUuid
	}
	return ""
}

func (m *Order) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Order) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Order) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Order) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_Started
}

func (m *Order) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type RequestBy struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestBy) Reset()         { *m = RequestBy{} }
func (m *RequestBy) String() string { return proto.CompactTextString(m) }
func (*RequestBy) ProtoMessage()    {}
func (*RequestBy) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3dcd817f520e5b1, []int{1}
}

func (m *RequestBy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestBy.Unmarshal(m, b)
}
func (m *RequestBy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestBy.Marshal(b, m, deterministic)
}
func (m *RequestBy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestBy.Merge(m, src)
}
func (m *RequestBy) XXX_Size() int {
	return xxx_messageInfo_RequestBy.Size(m)
}
func (m *RequestBy) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestBy.DiscardUnknown(m)
}

var xxx_messageInfo_RequestBy proto.InternalMessageInfo

func (m *RequestBy) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func init() {
	proto.RegisterEnum("order.api.v1.Status", Status_name, Status_value)
	proto.RegisterType((*Order)(nil), "order.api.v1.Order")
	proto.RegisterType((*RequestBy)(nil), "order.api.v1.RequestBy")
}

func init() { proto.RegisterFile("orderservice/orderservice.proto", fileDescriptor_f3dcd817f520e5b1) }

var fileDescriptor_f3dcd817f520e5b1 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0x3b, 0xfd, 0x93, 0x36, 0xb7, 0xf9, 0x4a, 0x99, 0x4f, 0x34, 0x14, 0xa1, 0xb1, 0xab,
	0x20, 0x12, 0xb1, 0xae, 0x74, 0xd9, 0x2e, 0xc4, 0x95, 0x92, 0xd2, 0xb5, 0xc4, 0xcc, 0x55, 0x02,
	0x26, 0x93, 0xce, 0xdc, 0x29, 0xf4, 0xed, 0x7c, 0x0e, 0x9f, 0x46, 0x32, 0x29, 0xb5, 0x85, 0xba,
	0x71, 0x97, 0xf3, 0x3b, 0xf7, 0x5c, 0x72, 0x0f, 0x03, 0x63, 0xa9, 0x04, 0x2a, 0x8d, 0x6a, 0x9d,
	0xa5, 0x78, 0xbd, 0x2f, 0xa2, 0x52, 0x49, 0x92, 0xdc, 0xb3, 0x2c, 0x4a, 0xca, 0x2c, 0x5a, 0xdf,
	0x4c, 0xbe, 0x18, 0x74, 0x9e, 0x2a, 0xc0, 0x39, 0xb4, 0x8d, 0xc9, 0x84, 0xcf, 0x02, 0x16, 0xba,
	0xb1, 0xfd, 0xe6, 0x17, 0xe0, 0x95, 0x4a, 0x0a, 0x93, 0xd2, 0x8b, 0xf5, 0x9a, 0xd6, 0xeb, 0x6f,
	0xd9, 0xb2, 0x1a, 0x19, 0x41, 0x6f, 0x65, 0x92, 0x82, 0x32, 0xda, 0xf8, 0xad, 0x80, 0x85, 0x9d,
	0x78, 0xa7, 0xf9, 0x29, 0x38, 0x49, 0x2e, 0x4d, 0x41, 0x7e, 0x3b, 0x60, 0x61, 0x33, 0xde, 0xaa,
	0x2a, 0x93, 0x1a, 0xa5, 0xb0, 0x48, 0x37, 0x7e, 0xc7, 0xae, 0xdc, 0x69, 0x7e, 0x05, 0x8e, 0xa6,
	0x84, 0x8c, 0xf6, 0x9d, 0x80, 0x85, 0x83, 0xe9, 0x49, 0xb4, 0xff, 0xbf, 0xd1, 0xc2, 0x7a, 0xf1,
	0x76, 0x86, 0x9f, 0x83, 0x4b, 0x59, 0x8e, 0x9a, 0x92, 0xbc, 0xf4, 0xbb, 0x01, 0x0b, 0x5b, 0xf1,
	0x0f, 0x98, 0x8c, 0xc1, 0x8d, 0x71, 0x65, 0x50, 0xd3, 0x6c, 0x73, 0xec, 0xbe, 0xcb, 0x19, 0x38,
	0xf5, 0x42, 0xde, 0x87, 0xee, 0x82, 0x12, 0x45, 0x28, 0x86, 0x0d, 0x3e, 0x00, 0x78, 0x2c, 0x9e,
	0x95, 0x7c, 0x57, 0xa8, 0xf5, 0x90, 0xf1, 0x7f, 0xe0, 0xce, 0x65, 0x5e, 0x7e, 0x60, 0x65, 0x37,
	0xb9, 0x07, 0xbd, 0x18, 0xdf, 0x4c, 0x21, 0x50, 0x0c, 0x5b, 0xd3, 0x4f, 0x06, 0x9e, 0x6d, 0x70,
	0x51, 0xd7, 0xcc, 0xef, 0xa0, 0x3f, 0x57, 0x98, 0x10, 0xd6, 0xbd, 0xfe, 0x3f, 0x3c, 0xc0, 0xc2,
	0xd1, 0x31, 0x38, 0x69, 0x54, 0xd1, 0x65, 0x29, 0xfe, 0x14, 0xbd, 0x87, 0xde, 0x03, 0x52, 0x9d,
	0x3b, 0x3b, 0x1c, 0xd9, 0x75, 0xf0, 0x4b, 0xf6, 0xd5, 0xb1, 0x2f, 0xe3, 0xf6, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0xbe, 0xe4, 0x9d, 0xe9, 0x3c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderServiceClient interface {
	CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	UpdateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	GetOrder(ctx context.Context, in *RequestBy, opts ...grpc.CallOption) (*Order, error)
}

type orderServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrderServiceClient(cc *grpc.ClientConn) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/order.api.v1.OrderService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/order.api.v1.OrderService/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrder(ctx context.Context, in *RequestBy, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/order.api.v1.OrderService/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
type OrderServiceServer interface {
	CreateOrder(context.Context, *Order) (*Order, error)
	UpdateOrder(context.Context, *Order) (*Order, error)
	GetOrder(context.Context, *RequestBy) (*Order, error)
}

// UnimplementedOrderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (*UnimplementedOrderServiceServer) CreateOrder(ctx context.Context, req *Order) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (*UnimplementedOrderServiceServer) UpdateOrder(ctx context.Context, req *Order) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (*UnimplementedOrderServiceServer) GetOrder(ctx context.Context, req *RequestBy) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}

func RegisterOrderServiceServer(s *grpc.Server, srv OrderServiceServer) {
	s.RegisterService(&_OrderService_serviceDesc, srv)
}

func _OrderService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.api.v1.OrderService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.api.v1.OrderService/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.api.v1.OrderService/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrder(ctx, req.(*RequestBy))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "order.api.v1.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderService_CreateOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _OrderService_UpdateOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _OrderService_GetOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orderservice/orderservice.proto",
}
